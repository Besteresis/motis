// This file is auto-generated by @hey-api/openapi-ts

export const $Mode = {
    type: 'string',
    enum: ['WALK', 'BIKE', 'CAR', 'BIKE_RENTAL', 'BIKE_TO_PARK', 'CAR_TO_PARK', 'CAR_HAILING', 'CAR_SHARING', 'CAR_PICKUP', 'CAR_RENTAL', 'FLEXIBLE', 'SCOOTER_RENTAL', 'TRANSIT', 'TRAM', 'SUBWAY', 'FERRY', 'AIRPLANE', 'BUS', 'COACH', 'RAIL', 'HIGHSPEED_RAIL', 'LONG_DISTANCE', 'NIGHT_RAIL', 'REGIONAL_FAST_RAIL', 'REGIONAL_RAIL']
} as const;

export const $VertexType = {
    type: 'string',
    description: `- \`NORMAL\` - latitude / longitude coordinate or address
- \`BIKESHARE\` - bike sharing station
- \`BIKEPARK\` - bike parking
- \`TRANSIT\` - transit stop
`,
    enum: ['NORMAL', 'BIKESHARE', 'BIKEPARK', 'TRANSIT']
} as const;

export const $Place = {
    type: 'object',
    required: ['name', 'lat', 'lon'],
    properties: {
        name: {
            description: 'name of the transit stop / PoI / address',
            type: 'string'
        },
        stopId: {
            description: "The ID of the stop. This is often something that users don't care about.",
            type: 'string'
        },
        lat: {
            description: 'latitude',
            type: 'number'
        },
        lon: {
            description: 'longitude',
            type: 'number'
        },
        arrivalDelay: {
            type: 'integer',
            description: `The offset from the scheduled arrival time of the boarding stop in this leg.
Scheduled time of arrival at boarding stop = endTime - arrivalDelay
`
        },
        departureDelay: {
            type: 'integer',
            description: `The offset from the scheduled departure time of the boarding stop in this leg.
Scheduled time of departure at boarding stop = startTime - departureDelay
`
        },
        arrival: {
            description: 'arrival time, format = unixtime in milliseconds',
            type: 'integer'
        },
        departure: {
            description: 'departure time, format = unixtime in milliseconds',
            type: 'integer'
        },
        vertexType: {
            '$ref': '#/components/schemas/VertexType'
        }
    }
} as const;

export const $RelativeDirection = {
    type: 'string',
    enum: ['DEPART', 'HARD_LEFT', 'LEFT', 'SLIGHTLY_LEFT', 'CONTINUE', 'SLIGHTLY_RIGHT', 'RIGHT', 'HARD_RIGHT', 'CIRCLE_CLOCKWISE', 'CIRCLE_COUNTERCLOCKWISE', 'ELEVATOR', 'UTURN_LEFT', 'UTURN_RIGHT']
} as const;

export const $AbsoluteDirection = {
    type: 'string',
    enum: ['NORTH', 'NORTHEAST', 'EAST', 'SOUTHEAST', 'SOUTH', 'SOUTHWEST', 'WEST', 'NORTHWEST']
} as const;

export const $StepInstruction = {
    type: 'object',
    required: ['relativeDirection', 'absoluteDirection', 'distance', 'streetName', 'exit', 'stayOn', 'area', 'lon', 'lat'],
    properties: {
        relativeDirection: {
            '$ref': '#/components/schemas/RelativeDirection'
        },
        absoluteDirection: {
            '$ref': '#/components/schemas/AbsoluteDirection'
        },
        distance: {
            description: 'The distance in meters that this step takes.',
            type: 'number'
        },
        streetName: {
            description: 'The name of the street.',
            type: 'string'
        },
        exit: {
            description: 'When exiting a highway or traffic circle, the exit name/number.',
            type: 'string'
        },
        stayOn: {
            description: `Indicates whether or not a street changes direction at an intersection.
`,
            type: 'boolean'
        },
        area: {
            description: `This step is on an open area, such as a plaza or train platform,
and thus the directions should say something like "cross"
`,
            type: 'boolean'
        },
        lon: {
            description: 'The longitude of start of the step',
            type: 'number'
        },
        lat: {
            description: 'The latitude of start of the step',
            type: 'number'
        }
    }
} as const;

export const $FeedScopedId = {
    type: 'object',
    required: ['feedId', 'id'],
    properties: {
        feedId: {
            type: 'string'
        },
        id: {
            type: 'string'
        }
    }
} as const;

export const $EncodedPolyline = {
    type: 'object',
    required: ['points', 'length'],
    properties: {
        points: {
            description: 'The encoded points of the polyline.',
            type: 'string'
        },
        length: {
            description: 'The number of points in the string',
            type: 'integer'
        }
    }
} as const;

export const $LevelEncodedPolyline = {
    type: 'object',
    required: ['from_level', 'to_level', 'polyline'],
    properties: {
        from_level: {
            description: 'level where this segment starts, based on OpenStreetMap data',
            type: 'number'
        },
        to_level: {
            description: 'level where this segment starts, based on OpenStreetMap data',
            type: 'number'
        },
        osm_way: {
            description: 'OpenStreetMap way index',
            type: 'integer'
        },
        polyline: {
            '$ref': '#/components/schemas/EncodedPolyline'
        }
    }
} as const;

export const $Leg = {
    type: 'object',
    required: ['mode', 'startTime', 'endTime', 'departureDelay', 'arrivalDelay', 'realTime', 'distance', 'duration', 'from', 'to', 'legGeometry'],
    properties: {
        mode: {
            '$ref': '#/components/schemas/Mode',
            description: 'Transport mode for this leg'
        },
        from: {
            '$ref': '#/components/schemas/Place'
        },
        to: {
            '$ref': '#/components/schemas/Place'
        },
        duration: {
            description: 'Leg duration in seconds',
            type: 'integer'
        },
        startTime: {
            type: 'integer',
            description: 'leg departure time, format = unixtime in milliseconds'
        },
        endTime: {
            type: 'integer',
            description: 'leg arrival time, format = unixtime in milliseconds'
        },
        departureDelay: {
            type: 'integer',
            description: `The offset from the scheduled departure time of the boarding stop in this leg.
Scheduled time of departure at boarding stop = startTime - departureDelay
`
        },
        arrivalDelay: {
            type: 'integer',
            description: `The offset from the scheduled arrival time of the boarding stop in this leg.
Scheduled time of arrival at boarding stop = endTime - arrivalDelay
`
        },
        realTime: {
            description: 'Whether there is real-time data about this leg',
            type: 'boolean'
        },
        distance: {
            description: 'The distance traveled while traversing this leg in meters.',
            type: 'number'
        },
        interlineWithPreviousLeg: {
            description: 'For transit legs, if the rider should stay on the vehicle as it changes route names.',
            type: 'boolean'
        },
        route: {
            description: `For transit legs, the route of the bus or train being used.
For non-transit legs, the name of the street being traversed.
`,
            type: 'string'
        },
        headsign: {
            description: `For transit legs, the headsign of the bus or train being used.
For non-transit legs, null
`,
            type: 'string'
        },
        agencyName: {
            type: 'string'
        },
        agencyUrl: {
            type: 'string'
        },
        routeColor: {
            type: 'string'
        },
        routeTextColor: {
            type: 'string'
        },
        routeType: {
            type: 'string'
        },
        routeId: {
            type: 'string'
        },
        agencyId: {
            type: 'string'
        },
        tripId: {
            type: 'string'
        },
        serviceDate: {
            type: 'string'
        },
        routeShortName: {
            type: 'string'
        },
        source: {
            description: 'Filename and line number where this trip is from',
            type: 'string'
        },
        intermediateStops: {
            description: `For transit legs, intermediate stops between the Place where the leg originates
and the Place where the leg ends. For non-transit legs, null.
`,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Place'
            }
        },
        legGeometry: {
            '$ref': '#/components/schemas/EncodedPolyline'
        },
        legGeometryWithLevels: {
            description: 'Like `legGeometry`, but split at level changes',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LevelEncodedPolyline'
            }
        },
        steps: {
            description: `A series of turn by turn instructions
used for walking, biking and driving.
`,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StepInstruction'
            }
        }
    }
} as const;

export const $Itinerary = {
    type: 'object',
    required: ['duration', 'startTime', 'endTime', 'walkTime', 'transitTime', 'waitingTime', 'walkDistance', 'transfers', 'legs'],
    properties: {
        duration: {
            description: 'journey duration in seconds',
            type: 'integer'
        },
        startTime: {
            type: 'integer',
            description: 'journey departure time, format = unixtime in milliseconds'
        },
        endTime: {
            type: 'integer',
            description: 'journey arrival time, format = unixtime in milliseconds'
        },
        walkTime: {
            type: 'integer',
            description: 'How much time is spent walking, in seconds.'
        },
        transitTime: {
            type: 'integer',
            description: 'How much time is spent on transit, in seconds.'
        },
        waitingTime: {
            type: 'integer',
            description: 'How much time is spent waiting for transit to arrive, in seconds.'
        },
        walkDistance: {
            type: 'integer',
            description: 'How far the user has to walk, in meters.'
        },
        transfers: {
            type: 'integer',
            description: 'The number of transfers this trip has.'
        },
        legs: {
            description: 'Journey legs',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Leg'
            }
        }
    }
} as const;